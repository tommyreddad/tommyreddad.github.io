<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trees on Tommy Reddad</title>
    <link>http://localhost:1313/tags/trees/</link>
    <description>Recent content in Trees on Tommy Reddad</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Nov 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/trees/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>galtonwatson, a Go module for efficient manipulation of Galton-Watson trees</title>
      <link>http://localhost:1313/post/2020-11-21-galtonwatson-go/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-11-21-galtonwatson-go/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/tommyreddad/galtonwatson&#34;&gt;&lt;strong&gt;galtonwatson&lt;/strong&gt;&lt;/a&gt; is a Go module in early development which implements efficient algorithms for the generation and manipulation of Galton-Watson trees. By extension, this tool can be used to generate uniformly random samples from many classes of rooted trees, including:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;uniformly random binary trees of a given size,&lt;/li&gt;&#xA;&lt;li&gt;uniformly random d-ary trees of a given size,&lt;/li&gt;&#xA;&lt;li&gt;uniformly random Cayley trees, i.e., unordered labeled trees of a given size,&lt;/li&gt;&#xA;&lt;li&gt;uniformly random ordered trees of a given size,&lt;/li&gt;&#xA;&lt;li&gt;etc.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Splay trees and optimality</title>
      <link>http://localhost:1313/post/2019-07-27-splay-trees/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-07-27-splay-trees/</guid>
      <description>&lt;p&gt;The splay tree is probably my favourite data structure. Is it useful&#xA;in practice? Probably not, but its remarkable optimality properties&#xA;coupled with its bare simplicity are so tantalizing that I&amp;rsquo;ve fallen&#xA;in love with splaying. In the rest of this post, I&amp;rsquo;ll describe the&#xA;splay tree structure, and present some of my favourite splay tree&#xA;properties. You will also find an instructive D3 visualization of a&#xA;splay tree in motion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Discrete minimax estimation with trees</title>
      <link>http://localhost:1313/post/2019-06-27-density-trees/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-06-27-density-trees/</guid>
      <description>&lt;p&gt;This morning, I submitted the final version of my paper &lt;a href=&#34;https://arxiv.org/abs/1812.06063&#34;&gt;Discrete&#xA;minimax estimation with trees&lt;/a&gt; (Devroye and Reddad, 2019), which is to appear in the Electronic&#xA;Journal of Statistics. I think this paper is conceptually quite&#xA;interesting, and I&amp;rsquo;m very happy with the final result, so in this post&#xA;I&amp;rsquo;ll describe some of the main ideas present in the work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some conditioned Galton-Watson trees never grow</title>
      <link>http://localhost:1313/post/2019-06-26-conditioned-gw-trees/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-06-26-conditioned-gw-trees/</guid>
      <description>&lt;p&gt;When programmers hear the phrase &amp;ldquo;random tree,&amp;rdquo; they most likely think&#xA;of a random binary search tree, i.e., a binary search tree built from&#xA;the insertion of a uniformly random permutation of \(n\) keys&amp;mdash;denote such&#xA;a tree by \(\mathrm{BST}_n\). A mathematician might instead think that a&#xA;``random tree&amp;rsquo;&amp;rsquo; is more likely to be a uniformly random tree taken&#xA;from some class, like the set of all ordered binary trees with \(n\) nodes&amp;mdash;denote&#xA;such a tree by \(\mathrm{UNIF}_n\). Of course, neither would be wrong. It&#xA;should be clear, though, that these two distributions on the space of&#xA;binary trees are quite different. In particular, most undergraduate&#xA;students of computer science learn, through the study of&#xA;comparison-based sorting algorithms, that&#xA;\[&#xA;\mathbf{E}\{\mathrm{height}(\mathrm{BST}_n)\} = \varTheta(\log n) ,&#xA;\]&#xA;and some will learn that&#xA;\[&#xA;\mathbf{E}\{\mathrm{height}(\mathrm{UNIF}_n)\} = \varTheta(\sqrt{n}) .&#xA;\]&#xA;Though random binary search trees might seem more immediately relevant&#xA;to programmers, uniformly random binary trees are part of a bigger&#xA;picture which is comparatively more versatile in the probabilistic&#xA;analysis of algorithms. To this end, we introduce the concept of&#xA;&lt;em&gt;Galton-Watson trees.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
