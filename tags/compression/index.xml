<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compression on Tommy Reddad</title>
    <link>http://localhost:1313/tags/compression/</link>
    <description>Recent content in Compression on Tommy Reddad</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Sep 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/compression/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Burrows-Wheeler transform, revisited</title>
      <link>http://localhost:1313/post/2020-09-27-burrows-wheeler-revisited/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2020-09-27-burrows-wheeler-revisited/</guid>
      <description>In my previous post, I discussed the Burrows-Wheeler transform, and embedded an HTML form on the page which dynamically computed the forward and inverse Burrows-Wheeler transforms with an additional move-to-front compression step. My initial implementation of this form was done in pure JavaScript with no particular care for efficiency, and in particular used \(O(n^2 \log n)\) space and time. The new implementation on the same page reduces this complexity to \(O(n \log n)\) time and \(O(n)\) space, making the form usable on larger texts.</description>
    </item>
    <item>
      <title>The Burrows-Wheeler transform and move-to-front compression</title>
      <link>http://localhost:1313/post/2019-08-08-burrows-wheeler/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2019-08-08-burrows-wheeler/</guid>
      <description>&lt;style type=&#34;text/css&#34;&gt;&#xA;.bit-content {&#xA;  display: inline;&#xA;  }&#xA;.bit-count {&#xA;  display: inline;&#xA;      font-family: Monaco, Menlo, Consolas, &#34;Courier New&#34;, DotumChe, monospace;&#xA;  }&#xA;.bit-count-label {&#xA;  font-weight: 700;&#xA;    display: inline;&#xA;      padding-right: 10px;&#xA;      }&#xA;.alphabet-content {&#xA;  display: table-cell;&#xA;    width: 100%;&#xA;      border: 1px solid #e1e1e1;&#xA;        margin-bottom: 16px;&#xA;        font-family: Monaco, Menlo, Consolas, &#34;Courier New&#34;, DotumChe, monospace;&#xA;  }&#xA;.alphabet {&#xA;  display: table;&#xA;    width: 100%;&#xA;    }&#xA;label {&#xA;  font-weight: 700;&#xA;    display: table-cell;&#xA;      width: 1px;&#xA;        padding-right: 10px;&#xA;  }&#xA;textarea {&#xA;  width: 100%;&#xA;    display: block;&#xA;      height: 300px;&#xA;        border: 1px solid #e1e1e1;&#xA;    margin: 0 0 10px;&#xA;      padding: 10px;&#xA;      font-family: Monaco, Menlo, Consolas, &#34;Courier New&#34;, DotumChe, monospace;&#xA;      }&#xA;.tab-pane {&#xA;  min-height: 300px;&#xA;  }&#xA;.nav-tabs {&#xA;  margin: 19px 0px 18px;&#xA;    visibility: visible;&#xA;      border-bottom: 1px solid #ddd;&#xA;      }&#xA;.nav-tabs &gt; li.active {&#xA;  font-weight: 700;&#xA;  }&#xA;.nav-tabs &gt; li {&#xA;  float: left;&#xA;    margin-bottom: -1px;&#xA;    }&#xA;.tab-content {&#xA;  margin-bottom: 10px;&#xA;  }&#xA;&lt;/style&gt;&#xA;&lt;ul class=&#34;nav nav-tabs&#34;&gt;&#xA;  &lt;li class=&#34;active&#34;&gt;&lt;a data-toggle=&#34;tab&#34; href=&#34;#input-contents&#34;&gt;Input&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a data-toggle=&#34;tab&#34; href=&#34;#bwt-contents&#34;&gt;BWT&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a data-toggle=&#34;tab&#34; href=&#34;#mtf-contents&#34;&gt;MTF&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;a data-toggle=&#34;tab&#34; href=&#34;#bwt-mtf-contents&#34;&gt;BWT+MTF&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;tab-content&#34;&gt;&#xA;  &lt;div id=&#34;input-contents&#34; class=&#34;tab-pane active&#34;&gt;&#xA;    &lt;textarea id=&#34;input&#34; placeholder=&#34;Text to compress...&#34;&gt;&lt;/textarea&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div id=&#34;bwt-contents&#34; class=&#34;tab-pane&#34;&gt;&#xA;    &lt;textarea id=&#34;bwt&#34; placeholder=&#34;Burrows-Wheeler transform to invert...&#34;&gt;&lt;/textarea&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div id=&#34;mtf-contents&#34; class=&#34;tab-pane&#34;&gt;&#xA;    &lt;div class=&#34;alphabet&#34;&gt;&#xA;      &lt;label for=&#34;mtf-Sigma&#34;&gt;Alphabet: &lt;/label&gt;&#xA;      &lt;input class=&#34;alphabet-content&#34; type=&#34;text&#34; id=&#34;mtf-Sigma&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;textarea id=&#34;mtf&#34; placeholder=&#34;MTF-compressed binary to decode...&#34;&gt;&lt;/textarea&gt;&#xA;    &lt;div class=&#34;bit-count&#34;&gt;&#xA;      &lt;div class=&#34;bit-count-label&#34;&gt;Bit count: &lt;/div&gt;&lt;div class=&#34;bit-content&#34; id=&#34;mtf-count&#34;&gt;&lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &lt;div id=&#34;bwt-mtf-contents&#34; class=&#34;tab-pane&#34;&gt;&#xA;    &lt;div class=&#34;alphabet&#34;&gt;&#xA;      &lt;label for=&#34;bwt-mtf-Sigma&#34;&gt;Alphabet: &lt;/label&gt;&#xA;      &lt;input class=&#34;alphabet-content&#34; type=&#34;text&#34; id=&#34;bwt-mtf-Sigma&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;textarea id=&#34;bwt-mtf&#34; placeholder=&#34;BWT+MTF-compressed binary to decode...&#34;&gt;&lt;/textarea&gt;&#xA;    &lt;div class=&#34;bit-count&#34;&gt;&#xA;      &lt;div class=&#34;bit-count-label&#34;&gt;Bit count: &lt;/div&gt;&lt;div class=&#34;bit-content&#34; id=&#34;bwt-mtf-count&#34;&gt;&lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;script type=&#34;text/javascript&#34; src=&#34;http://localhost:1313/js/2019-08-08-burrows-wheeler/bwt.js&#34;&gt;&lt;/script&gt;&#xA;The above form implements algorithms to code and decode from the&#xA;move-to-front compression scheme, with or without an additional&#xA;application of the Burrows-Wheeler transform. These extremely slick&#xA;algorithms blew my mind when I first heard of them. They are currently&#xA;in use, among other places, in&#xA;[bzip2](https://en.wikipedia.org/wiki/Bzip2) file compression.</description>
    </item>
  </channel>
</rss>
